scale_fill_manual(values = cores_irrigation)
# Gráfico para high moisture
ggplot(
dados3 %>% filter(moisture == "High moisture"),
aes(x = time, y = sev_mean, color = irrigation_type, fill = irrigation_type)
) +
geom_line(aes(group = tratamento), size = 1) +
geom_point(shape = 21, size = 2, color = "black") +  # fill é mapeado, contorno preto fixo
geom_errorbar(aes(ymin = sev_mean - sev_sd, ymax = sev_mean + sev_sd),
width = 0, alpha = 1) +
theme_bw() +
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.title = element_text(family = "roboto", size = 12, face = "plain"),
axis.text.x = element_text(family = "roboto", size = 11),  # alterado para mostrar texto ao invés de blank
axis.text.y = element_text(family = "roboto", size = 12),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),
legend.position = "bottom"
)+
labs(
title = "Severidade da doença - Alta Umidade",
x = "Tempo (dias)",
y = "Disease severity (%)",
color = "Tipo de irrigação",
fill = "Tipo de irrigação"
) +
scale_color_manual(values = cores_irrigation) +
scale_fill_manual(values = cores_irrigation)
gif_moderate <- ggplot(
dados3 %>% filter(moisture == "Moderate moisture"),
aes(x = time, y = sev_mean, color = irrigation_type, fill = irrigation_type)
) +
geom_line(aes(group = tratamento), linewidth = 1) +
geom_point(shape = 21, size = 2, color = "black") +
geom_errorbar(
aes(ymin = sev_mean - sev_sd, ymax = sev_mean + sev_sd),
width = 0.2, alpha = 0.8
) +
theme_bw() +
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
axis.title = element_text(family = "roboto", size = 12),
axis.text = element_text(family = "roboto", size = 11),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),
legend.position = "bottom"
) +
labs(
title = "Umidade Moderada — Dia: {frame_along}",
x = "Tempo (dias)",
y = "Severidade da doença (%)",
color = "Tipo de irrigação",
fill = "Tipo de irrigação"
) +
scale_color_manual(values = cores_irrigation) +
scale_fill_manual(values = cores_irrigation) +
transition_reveal(along = time)
#gif_anim_moderate <- animate(gif_moderate, fps = 10, width = 800, height = 500, renderer = #gifski_renderer())
#anim_save("severidade_moderate_moisture.gif", gif_anim_moderate)
gif_high <- ggplot(
dados3 %>% filter(moisture == "High moisture"),
aes(x = time, y = sev_mean, color = irrigation_type, fill = irrigation_type)
) +
geom_line(aes(group = tratamento), linewidth = 1) +
geom_point(shape = 21, size = 2, color = "black") +
geom_errorbar(
aes(ymin = sev_mean - sev_sd, ymax = sev_mean + sev_sd),
width = 0.2, alpha = 0.8
) +
theme_bw() +
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
axis.title = element_text(family = "roboto", size = 12),
axis.text = element_text(family = "roboto", size = 11),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),
legend.position = "bottom"
) +
labs(
title = "Alta Umidade — Dia: {frame_along}",
x = "Tempo (dias)",
y = "Severidade da doença (%)",
color = "Tipo de irrigação",
fill = "Tipo de irrigação"
) +
scale_color_manual(values = cores_irrigation) +
scale_fill_manual(values = cores_irrigation) +
transition_reveal(along = time)
#Criar animação
#gif_anim_high <- animate(gif_high, fps = 10, width = 800, height = 500, renderer = #gifski_renderer())
# Salvar
#anim_save("severidade_high_moisture.gif", gif_anim_high)
dados_63 <- dados_filtrados |>
dplyr::filter(time == 63)
# Instalar e carregar pacotes
#Verificação e instalação automática de pacotes necessários
packages <- c("readxl", "dplyr", "ggplot2", "epifitter", "agricolae", "car", "gganimate", "animate", "DHARMa", "ggthemes", "skimr", "DataExplorer", "tidyverse", "gifski", "showtext", "sysfonts","png", "easystats", "performance", "emmeans", "multcomp")
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if(length(new_packages)) install.packages(new_packages)
# Carregar os pacotes
library(readxl)
library(dplyr)
library(ggplot2)
library(epifitter)
library(agricolae)
library(car)  # para Levene
library(gganimate)
library(animate)
library(DHARMa)
library(skimr)
library(DataExplorer)
library(ggthemes)
library(tidyverse)
library(gifski)
library(showtext) #Para utilizar outras fontes
library(sysfonts) #Para utilizar outras fontes
library(png)
library(easystats)
library(performance)
library(emmeans)
library(multcomp)
dados <- read_excel("dados.xlsx")
dados
glimpse(dados)
skim(dados)
names(dados)
font_add_google(name = "montserrat", family = "montserrat")
font_add_google(name = "inter", family = "inter")
font_add_google(name = "manrope", family = "manrope")
font_add_google(name = "nunito", family = "nunito")
font_add_google(name = "work sans", family = "work sans")
font_add_google(name = "lexend", family = "lexend")
font_add_google(name = "raleway", family = "raleway")
font_add_google(name = "quicksand", family = "quicksand")
font_add_google(name = "roboto", family = "roboto")
font_add_google(name = "poppins", family = "poppins")
showtext_auto()
cores_irrigation <- c(
"Drip" = "#000194",
"Furrow" = "#28C800",
"MS" = "#C90A00",
"MS above canopy" = "#E68A2E",
"Overhead" = "#FFDE00"
)
cores_contorno <- c(
"Drip" = "#000060",
"Furrow" = "#1E9E00",
"MS" = "#990700",
"MS above canopy" = "#A6601F",
"Overhead" = "#CCA800"
)
plot_missing(dados)
summary(dados)
# Subconjunto para irrigação com umidade moderada
dados_moderate <- dados %>% filter(moisture == "Moderate moisture")
# Subconjunto para irrigação com umidade alta
dados_high <- dados %>% filter(moisture == "High moisture")
dados_moderate
dados_high
# Gráficos de pontos (dados de umidade moderada)
ggplot(dados_moderate, aes(x = time, y = sev, color = irrigation_type)) +
geom_jitter(size = 2, alpha = 0.7) +
labs(
title = "Severidade ao longo do tempo - Umidade Moderada",
x = "Tempo",
y = "Severidade",
color = "Tipo de Irrigação"
) +
scale_color_manual(values = cores_irrigation) +
theme_minimal() +  # base limpa
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.title = element_text(family = "roboto", size = 12, face = "plain"),
axis.text = element_text(family = "roboto", size = 12),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),
legend.position = "bottom"
)
# Gráficos de pontos (dados de umidade alta)
ggplot(dados_high, aes(x = time, y = sev, color = irrigation_type)) +
geom_jitter(size = 2, alpha = 0.7) +
labs(
title = "Severidade ao longo do tempo - Umidade Alta",
x = "Tempo",
y = "Severidade",
color = "Tipo de Irrigação"
) +
scale_color_manual(values = cores_irrigation) +
theme_minimal() +  # base limpa
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.title = element_text(family = "roboto", size = 12, face = "plain"),
axis.text = element_text(family = "roboto", size = 12),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),
legend.position = "bottom"
)
#ALTERAÇÃO DE DADOS
dados2 <- dados %>%
mutate(
tratamento = paste(irrigation_type, moisture, sep = " + "),  # >>> coluna usada no eixo x
irrigation_type = as.factor(irrigation_type)  # >>> usada para definir as cores
)
dados3 <- dados2 %>%
group_by(tratamento, irrigation_type, moisture, time) %>%
summarise(
sev_mean = mean(sev, na.rm = TRUE) * 100,
sev_sd = sd(sev, na.rm = TRUE) * 100
)
# Gráfico para Moderate moisture
ggplot(
dados3 %>% filter(moisture == "Moderate moisture"),
aes(x = time, y = sev_mean, color = irrigation_type, fill = irrigation_type)
) +
geom_line(aes(group = tratamento), size = 1) +
geom_point(shape = 21, size = 2, color = "black") +
geom_errorbar(aes(ymin = sev_mean - sev_sd, ymax = sev_mean + sev_sd),
width = 0, alpha = 1) +
theme_bw() +
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.title = element_text(family = "roboto", size = 12, face = "plain"),
axis.text.x = element_text(family = "roboto", size = 11),  # alterado para mostrar texto ao invés de blank
axis.text.y = element_text(family = "roboto", size = 12),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),
legend.position = "bottom"
) +
labs(
title = "Severidade da doença - Umidade Moderada",
x = "Tempo (dias)",
y = "Disease severity (%)",
color = "Tipo de irrigação",
fill = "Tipo de irrigação"
) +
scale_color_manual(values = cores_irrigation) +
scale_fill_manual(values = cores_irrigation)
# Gráfico para high moisture
ggplot(
dados3 %>% filter(moisture == "High moisture"),
aes(x = time, y = sev_mean, color = irrigation_type, fill = irrigation_type)
) +
geom_line(aes(group = tratamento), size = 1) +
geom_point(shape = 21, size = 2, color = "black") +  # fill é mapeado, contorno preto fixo
geom_errorbar(aes(ymin = sev_mean - sev_sd, ymax = sev_mean + sev_sd),
width = 0, alpha = 1) +
theme_bw() +
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.title = element_text(family = "roboto", size = 12, face = "plain"),
axis.text.x = element_text(family = "roboto", size = 11),  # alterado para mostrar texto ao invés de blank
axis.text.y = element_text(family = "roboto", size = 12),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),
legend.position = "bottom"
)+
labs(
title = "Severidade da doença - Alta Umidade",
x = "Tempo (dias)",
y = "Disease severity (%)",
color = "Tipo de irrigação",
fill = "Tipo de irrigação"
) +
scale_color_manual(values = cores_irrigation) +
scale_fill_manual(values = cores_irrigation)
gif_moderate <- ggplot(
dados3 %>% filter(moisture == "Moderate moisture"),
aes(x = time, y = sev_mean, color = irrigation_type, fill = irrigation_type)
) +
geom_line(aes(group = tratamento), linewidth = 1) +
geom_point(shape = 21, size = 2, color = "black") +
geom_errorbar(
aes(ymin = sev_mean - sev_sd, ymax = sev_mean + sev_sd),
width = 0.2, alpha = 0.8
) +
theme_bw() +
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
axis.title = element_text(family = "roboto", size = 12),
axis.text = element_text(family = "roboto", size = 11),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),
legend.position = "bottom"
) +
labs(
title = "Umidade Moderada — Dia: {frame_along}",
x = "Tempo (dias)",
y = "Severidade da doença (%)",
color = "Tipo de irrigação",
fill = "Tipo de irrigação"
) +
scale_color_manual(values = cores_irrigation) +
scale_fill_manual(values = cores_irrigation) +
transition_reveal(along = time)
#gif_anim_moderate <- animate(gif_moderate, fps = 10, width = 800, height = 500, renderer = #gifski_renderer())
#anim_save("severidade_moderate_moisture.gif", gif_anim_moderate)
gif_high <- ggplot(
dados3 %>% filter(moisture == "High moisture"),
aes(x = time, y = sev_mean, color = irrigation_type, fill = irrigation_type)
) +
geom_line(aes(group = tratamento), linewidth = 1) +
geom_point(shape = 21, size = 2, color = "black") +
geom_errorbar(
aes(ymin = sev_mean - sev_sd, ymax = sev_mean + sev_sd),
width = 0.2, alpha = 0.8
) +
theme_bw() +
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
axis.title = element_text(family = "roboto", size = 12),
axis.text = element_text(family = "roboto", size = 11),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),
legend.position = "bottom"
) +
labs(
title = "Alta Umidade — Dia: {frame_along}",
x = "Tempo (dias)",
y = "Severidade da doença (%)",
color = "Tipo de irrigação",
fill = "Tipo de irrigação"
) +
scale_color_manual(values = cores_irrigation) +
scale_fill_manual(values = cores_irrigation) +
transition_reveal(along = time)
#Criar animação
#gif_anim_high <- animate(gif_high, fps = 10, width = 800, height = 500, renderer = #gifski_renderer())
# Salvar
#anim_save("severidade_high_moisture.gif", gif_anim_high)
# Identificar quais irrigation_type têm os dois níveis de moisture
tipos_validos <- dados %>%
group_by(irrigation_type) %>%
summarise(n_moisture = n_distinct(moisture)) %>%
filter(n_moisture == 2) %>%
pull(irrigation_type)
# Filtrar os dados para manter apenas os tipos válidos
dados_filtrados <- dados %>%
filter(irrigation_type %in% tipos_validos)
dados_63 <- dados_filtrados |>
dplyr::filter(time == 63)
aov_dados63 = aov(sev ~ irrigation_type*moisture + as.factor(block), data = dados_63)
summary(aov_dados63)
ggplot(dados_63, aes(x = irrigation_type, y = sev, fill = irrigation_type, color = irrigation_type)) +
geom_boxplot(alpha = 0.8, size = 0.8, show.legend = FALSE) +
labs(
title = "Severidade por Tipo de Irrigação e Umidade",
x = NULL,  # >>> remove o título do eixo X
y = "Severidade",
fill = "Tipo de Irrigação",  # >>> legenda mais limpa
color = "Tipo de Irrigação"
) +
geom_jitter(shape = 1, size = 1) +
scale_fill_manual(values = cores_irrigation) +  # >>> novas cores por tipo
scale_color_manual(values = cores_contorno) +      # >>> novos contornos por tipo
facet_wrap(~moisture) +
theme_minimal() +
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.title = element_text(family = "roboto", size = 12, face = "plain"),
axis.text.x = element_blank(),  # >>> inclinação para visualização melhor
axis.text.y = element_text(family = "roboto", size = 12),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),  # >>> aumento da fonte para melhor leitura
legend.position = "bottom"
) +
guides(
fill = guide_legend(override.aes = list(shape = 21, size = 5))
)
# Histogram
hist(residuals(aov_dados63),
main = "Histograma dos resíduos da ANOVA (SEV)",
xlab = "Resíduos",
ylab = "Frequência",
col = "lightgreen",
border = "black")
modelo_lm <- lm(sev ~ irrigation_type * moisture + as.factor(block), data = dados_63)
# 4. Simular resíduos com DHARMa
residuos_sim <- simulateResiduals(fittedModel = modelo_lm)
# 5. Plotar diagnósticos
plot(residuos_sim)
check_normality(aov_dados63)
# QQ-plot
qqnorm(residuals(aov_dados63), main = "QQ-Plot dos resíduos")
qqline(residuals(aov_dados63), col = "red", lwd = 2)
# Teste de Shapiro-Wilk
shapiro.test(residuals(aov_dados63))
check_heteroscedasticity(aov_dados63)
#Bartlett (apenas se resíduos forem normais):
bartlett.test(sev ~ interaction(irrigation_type, moisture), data = dados_63)
#Para dados não necessariamente normais
leveneTest(sev ~ interaction(irrigation_type, moisture), data = dados_63)
# Médias ajustadas
medias <- emmeans(modelo_lm, ~ irrigation_type * moisture)
# Comparações de médias com agrupamento por letras
letras <- cld(medias, adjust = "sidak", Letters = letters)
# Visualizar resultado
print(letras)
emmeans(modelo_lm, pairwise ~ moisture, adjust = "tukey")
cld(emmeans(modelo_lm, ~ moisture), adjust = "tukey")
library(epifitter)
library(dplyr)
# 3. Calcular a AACPD para cada combinação de tratamento e bloco
aacpd_resultado <- dados2 %>%
group_by(tratamento, block) %>%
summarise(AACPD = audpc(sev*100, time), .groups = "drop")
# 4. Visualizar os resultados
print(aacpd_resultado)
modelo_aacpd <- aov(AACPD ~ tratamento, data = aacpd_resultado)
summary(modelo_aacpd)
# Histogram
hist(residuals(modelo_aacpd),
main = "Histograma dos resíduos da ANOVA (AACPD)",
xlab = "Resíduos",
ylab = "Frequência",
col = "lightgreen",
border = "black")
modelo_lmaacpd <- lm(AACPD ~ tratamento + as.factor(block), data = aacpd_resultado)
# 4. Simular resíduos com DHARMa
residuos_simaacpd <- simulateResiduals(fittedModel = modelo_lmaacpd)
# 5. Plotar diagnósticos
plot(residuos_simaacpd)
check_normality(modelo_aacpd)
# QQ-plot
qqnorm(residuals(modelo_aacpd), main = "QQ-Plot dos resíduos")
qqline(residuals(modelo_aacpd), col = "red", lwd = 2)
# Teste de Shapiro-Wilk
shapiro.test(residuals(modelo_aacpd))
check_heteroscedasticity(modelo_aacpd)
#Bartlett (apenas se resíduos forem normais):
bartlett.test(AACPD ~ tratamento, data = aacpd_resultado)
#Para dados não necessariamente normais
leveneTest(AACPD ~ tratamento, data = aacpd_resultado)
aacpd_resultado2 <- aacpd_resultado %>%
mutate(
irrigation_type = case_when(
str_detect(tratamento, "Drip") ~ "Drip",
str_detect(tratamento, "Furrow") ~ "Furrow",
str_detect(tratamento, "MS above canopy") ~ "MS above canopy",
str_detect(tratamento, "MS") ~ "MS",
str_detect(tratamento, "Overhead") ~ "Overhead"
)
)
aacpd_resultado2 <- aacpd_resultado2 %>%
mutate(
irrigation_type = case_when(
str_detect(tratamento, "Drip") ~ "Drip",
str_detect(tratamento, "Furrow") ~ "Furrow",
str_detect(tratamento, "MS above canopy") ~ "MS above canopy",
str_detect(tratamento, "MS") ~ "MS",
str_detect(tratamento, "Overhead") ~ "Overhead"
),
moisture = case_when(
str_detect(tratamento, "High moisture") ~ "High moisture",
str_detect(tratamento, "Moderate moisture") ~ "Moderate moisture",
str_detect(tratamento, "Low moisture") ~ "Low moisture"
)
)
ggplot(aacpd_resultado2, aes(x = tratamento, y = AACPD, fill = irrigation_type, color = irrigation_type)) +
geom_boxplot(alpha = 0.8, size = 0.8, show.legend = FALSE) +
labs(
title = "Área Abaixo da Curva do Progresso da Doença (AACPD)",
x = NULL,
y = "AACPD",
fill = "Tipo de Irrigação",
color = "Tipo de Irrigação"
) +
geom_jitter(shape = 1, size = 1) +
scale_fill_manual(values = cores_irrigation) +
scale_color_manual(values = cores_contorno) +
facet_wrap(~moisture) +
theme_minimal() +
theme(
plot.title = element_text(family = "poppins", size = 15, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.title = element_text(family = "roboto", size = 12, face = "plain"),
axis.text.x = element_blank(),
axis.text.y = element_text(family = "roboto", size = 12),
legend.title = element_text(family = "roboto", size = 13),
legend.text = element_text(family = "roboto", size = 10),
legend.position = "bottom"
) +
guides(
fill = guide_legend(override.aes = list(shape = 21, size = 5))
)
# ANOVA já ajustada no objeto modelo_aacpd
# Teste de comparação de médias (Tukey)
library(agricolae)
# Converter bloco para fator, se necessário
aacpd_resultado$block <- as.factor(aacpd_resultado$block)
# Rodar ANOVA novamente com bloco (modelo mais completo)
modelo_com_bloco <- aov(AACPD ~ tratamento + block, data = aacpd_resultado)
# Teste de Tukey com agricolae
tukey_resultado <- HSD.test(modelo_com_bloco, trt = "tratamento", group = TRUE)
# Visualizar grupos
print(tukey_resultado$groups)
font_add_google(name = "inter", family = "inter")
font_add_google(name = "manrope", family = "manrope")
font_add_google(name = "nunito", family = "nunito")
font_add_google(name = "work sans", family = "work sans")
font_add_google(name = "lexend", family = "lexend")
font_add_google(name = "raleway", family = "raleway")
font_add_google(name = "quicksand", family = "quicksand")
font_add_google(name = "roboto", family = "roboto")
font_add_google(name = "poppins", family = "poppins")
showtext_auto()
